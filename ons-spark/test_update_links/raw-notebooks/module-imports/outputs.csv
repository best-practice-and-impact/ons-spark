cell_no,execution_count,tidy_python_output,r_output
1,1,"['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
","Reserved                 package:base                  R Documentation

_R_e_s_e_r_v_e_d _W_o_r_d_s _i_n _R

_D_e_s_c_r_i_p_t_i_o_n:

     The reserved words in R's parser are

     ‘if’ ‘else’ ‘repeat’ ‘while’ ‘function’ ‘for’ ‘in’ ‘next’ ‘break’

     ‘TRUE’ ‘FALSE’ ‘NULL’ ‘Inf’ ‘NaN’ ‘NA’ ‘NA_integer_’ ‘NA_real_’
     ‘NA_complex_’ ‘NA_character_’

     ‘...’ and ‘..1’, ‘..2’ etc, which are used to refer to arguments
     passed down from a calling function, see ‘...’.

_D_e_t_a_i_l_s:

     Reserved words outside quotes are always parsed to be references
     to the objects linked to in the ‘Description’, and hence they are
     not allowed as syntactic names (see ‘make.names’).  They *are*
     allowed as non-syntactic names, e.g. inside backtick quotes.


"
4,2,"Help on built-in function sum in module builtins:

sum(iterable, start=0, /)
    Return the sum of a 'start' value (default: 0) plus an iterable of numbers
    
    When the iterable is empty, return the start value.
    This function is intended specifically for use with numeric values and may
    reject non-numeric types.
",
6,3,"6
",
8,4,,
10,5,"'NoneType' object has no attribute '_jvm'
",
12,6,"Help on function sum in module pyspark.sql.functions:

sum(col)
    Aggregate function: returns the sum of all values in the expression.
    
    .. versionadded:: 1.3
",
14,7,,
16,8,"+---+---------+
| id|double_id|
+---+---------+
|  0|        0|
|  1|        2|
|  2|        4|
|  3|        6|
|  4|        8|
+---+---------+
",
18,9,"+---+
| id|
+---+
|  0|
|  1|
|  2|
|  3|
|  4|
+---+

+---------+
|double_id|
+---------+
|        0|
|        2|
|        4|
|        6|
|        8|
+---------+
",
20,10,"'str' object is not callable
",
21,11,"'double_id'
",
23,12,"+---+---------+---------+
| id|double_id|triple_id|
+---+---------+---------+
|  0|        0|        0|
|  1|        2|        3|
|  2|        4|        6|
|  3|        6|        9|
|  4|        8|       12|
+---+---------+---------+
",
25,,,"FDist                  package:stats                   R Documentation

_T_h_e _F _D_i_s_t_r_i_b_u_t_i_o_n

_D_e_s_c_r_i_p_t_i_o_n:

     Density, distribution function, quantile function and random
     generation for the F distribution with ‘df1’ and ‘df2’ degrees of
     freedom (and optional non-centrality parameter ‘ncp’).

_U_s_a_g_e:

     df(x, df1, df2, ncp, log = FALSE)
     pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)
     qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)
     rf(n, df1, df2, ncp)
     
_A_r_g_u_m_e_n_t_s:

    x, q: vector of quantiles.

       p: vector of probabilities.

       n: number of observations. If ‘length(n) > 1’, the length is
          taken to be the number required.

df1, df2: degrees of freedom.  ‘Inf’ is allowed.

     ncp: non-centrality parameter. If omitted the central F is
          assumed.

log, log.p: logical; if TRUE, probabilities p are given as log(p).

lower.tail: logical; if TRUE (default), probabilities are P[X <= x],
          otherwise, P[X > x].

_D_e_t_a_i_l_s:

     The F distribution with ‘df1 =’ n1 and ‘df2 =’ n2 degrees of
     freedom has density

     f(x) = Gamma((n1 + n2)/2) / (Gamma(n1/2) Gamma(n2/2))
         (n1/n2)^(n1/2) x^(n1/2 - 1)
         (1 + (n1/n2) x)^-(n1 + n2)/2
     
     for x > 0.

     It is the distribution of the ratio of the mean squares of n1 and
     n2 independent standard normals, and hence of the ratio of two
     independent chi-squared variates each divided by its degrees of
     freedom.  Since the ratio of a normal and the root mean-square of
     m independent normals has a Student's t_m distribution, the square
     of a t_m variate has a F distribution on 1 and m degrees of
     freedom.

     The non-central F distribution is again the ratio of mean squares
     of independent normals of unit variance, but those in the
     numerator are allowed to have non-zero means and ‘ncp’ is the sum
     of squares of the means.  See Chisquare for further details on
     non-central distributions.

_V_a_l_u_e:

     ‘df’ gives the density, ‘pf’ gives the distribution function ‘qf’
     gives the quantile function, and ‘rf’ generates random deviates.

     Invalid arguments will result in return value ‘NaN’, with a
     warning.

     The length of the result is determined by ‘n’ for ‘rf’, and is the
     maximum of the lengths of the numerical arguments for the other
     functions.

     The numerical arguments other than ‘n’ are recycled to the length
     of the result.  Only the first elements of the logical arguments
     are used.

_N_o_t_e:

     Supplying ‘ncp = 0’ uses the algorithm for the non-central
     distribution, which is not the same algorithm used if ‘ncp’ is
     omitted.  This is to give consistent behaviour in extreme cases
     with values of ‘ncp’ very near zero.

     The code for non-zero ‘ncp’ is principally intended to be used for
     moderate values of ‘ncp’: it will not be highly accurate,
     especially in the tails, for large values.

_S_o_u_r_c_e:

     For the central case of ‘df’, computed _via_ a binomial
     probability, code contributed by Catherine Loader (see ‘dbinom’);
     for the non-central case computed _via_ ‘dbeta’, code contributed
     by Peter Ruckdeschel.

     For ‘pf’, _via_ ‘pbeta’ (or for large ‘df2’, _via_ ‘pchisq’).

     For ‘qf’, _via_ ‘qchisq’ for large ‘df2’, else _via_ ‘qbeta’.

_R_e_f_e_r_e_n_c_e_s:

     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S
     Language_.  Wadsworth & Brooks/Cole.

     Johnson, N. L., Kotz, S. and Balakrishnan, N. (1995) _Continuous
     Univariate Distributions_, volume 2, chapters 27 and 30.  Wiley,
     New York.

_S_e_e _A_l_s_o:

     Distributions for other standard distributions, including ‘dchisq’
     for chi-squared and ‘dt’ for Student's t distributions.

_E_x_a_m_p_l_e_s:

     ## Equivalence of pt(.,nu) with pf(.^2, 1,nu):
     x <- seq(0.001, 5, len = 100)
     nu <- 4
     stopifnot(all.equal(2*pt(x,nu) - 1, pf(x^2, 1,nu)),
               ## upper tails:
               all.equal(2*pt(x,     nu, lower=FALSE),
                           pf(x^2, 1,nu, lower=FALSE)))
     
     ## the density of the square of a t_m is 2*dt(x, m)/(2*x)
     # check this is the same as the density of F_{1,m}
     all.equal(df(x^2, 1, 5), dt(x, 5)/x)
     
     ## Identity:  qf(2*p - 1, 1, df) == qt(p, df)^2  for  p >= 1/2
     p <- seq(1/2, .99, length = 50); df <- 10
     rel.err <- function(x, y) ifelse(x == y, 0, abs(x-y)/mean(abs(c(x,y))))
     quantile(rel.err(qf(2*p - 1, df1 = 1, df2 = df), qt(p, df)^2), .90)  # ~= 7e-9
     

"
