cell_no,execution_count,tidy_python_output,r_output
1,2,,
4,2,"  cal_year_animal_type  Bird  Budgie  Bull  Cat  Cow  Deer  Dog  Ferret  Fish  \
0                 2014   110       0     0  298    1     5   90       0     0   
1                 2013    85       0     0  313    0     7   93       0     0   
2                 2018   126       1     0  305    0    16   91       1     0   
3                 2015   106       0     0  263    0     6   88       1     0   
4                 2011   120       1     0  309    0     9  103       2     0   

           ...            Pigeon  Rabbit  Sheep  Snake  Squirrel  Tortoise  \
0          ...                 1       3      0      0         2         0   
1          ...                 1       0      0      2         7         0   
2          ...                 1       2      0      1         5         0   
3          ...                 0       0      1      0         5         1   
4          ...                 0       0      0      0         4         0   

   Unknown - Animal Rescue From Water - Farm Animal  \
0                                                 1   
1                                                 0   
2                                                 0   
3                                                 0   
4                                                 0   

   Unknown - Domestic Animal Or Pet  Unknown - Heavy Livestock Animal  \
0                                29                                 0   
1                                19                                 2   
2                                 7                                 2   
3                                29                                 0   
4                                13                                 8   

   Unknown - Wild Animal  
0                      7  
1                     12  
2                      5  
3                      7  
4                      0  

[5 rows x 27 columns]
","Rows: ??
Columns: 27
Database: spark_connection
$ cal_year_animal_type                               <chr> ""2014"", ""2013"", ""20…
$ Bird                                               <dbl> 110, 85, 126, 106, …
$ Budgie                                             <dbl> 0, 0, 1, 0, 1, 0, 0…
$ Bull                                               <dbl> 0, 0, 0, 0, 0, 0, 0…
$ Cat                                                <dbl> 298, 313, 305, 263,…
$ Cow                                                <dbl> 1, 0, 0, 0, 0, 3, 0…
$ Deer                                               <dbl> 5, 7, 16, 6, 9, 7, …
$ Dog                                                <dbl> 90, 93, 91, 88, 103…
$ Ferret                                             <dbl> 0, 0, 1, 1, 2, 1, 0…
$ Fish                                               <dbl> 0, 0, 0, 0, 0, 0, 0…
$ Fox                                                <dbl> 22, 25, 33, 21, 26,…
$ Goat                                               <dbl> 1, 0, 0, 0, 0, 0, 0…
$ Hamster                                            <dbl> 1, 3, 0, 0, 3, 0, 0…
$ Hedgehog                                           <dbl> 0, 0, 0, 0, 0, 0, 0…
$ Horse                                              <dbl> 12, 16, 12, 12, 22,…
$ Lamb                                               <dbl> 0, 0, 0, 0, 0, 1, 0…
$ Lizard                                             <dbl> 0, 0, 1, 0, 0, 0, 0…
$ Pigeon                                             <dbl> 1, 1, 1, 0, 0, 0, 0…
$ Rabbit                                             <dbl> 3, 0, 2, 0, 0, 0, 0…
$ Sheep                                              <dbl> 0, 0, 0, 1, 0, 1, 0…
$ Snake                                              <dbl> 0, 2, 1, 0, 0, 0, 0…
$ Squirrel                                           <dbl> 2, 7, 5, 5, 4, 4, 1…
$ Tortoise                                           <dbl> 0, 0, 0, 1, 0, 0, 0…
$ `Unknown - Animal Rescue From Water - Farm Animal` <dbl> 1, 0, 0, 0, 0, 1, 1…
$ `Unknown - Domestic Animal Or Pet`                 <dbl> 29, 19, 7, 29, 13, …
$ `Unknown - Heavy Livestock Animal`                 <dbl> 0, 2, 2, 0, 8, 4, 0…
$ `Unknown - Wild Animal`                            <dbl> 7, 12, 5, 7, 0, 4, …
"
7,3,,
10,4,,
13,5,"0.086908868435997877
","[1] 0.08690887
"
16,6,"0.29083878195595769
","[1] 0.2908388
"
19,13,"Traceback (most recent call last):
  File ""/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/utils.py"", line 63, in deco
    return f(*a, **kw)
  File ""/usr/local/lib/python3.6/dist-packages/py4j/protocol.py"", line 328, in get_return_value
    format(target_id, ""."", name), value)
py4j.protocol.Py4JJavaError: An error occurred while calling o479.crosstab.
: org.apache.spark.sql.AnalysisException: Reference 'Cat' is ambiguous, could be: Cat, Cat.;
	at org.apache.spark.sql.catalyst.expressions.package$AttributeSeq.resolve(package.scala:259)
	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveQuoted(LogicalPlan.scala:121)
	at org.apache.spark.sql.Dataset.resolve(Dataset.scala:221)
	at org.apache.spark.sql.Dataset.col(Dataset.scala:1268)
	at org.apache.spark.sql.DataFrameNaFunctions.org$apache$spark$sql$DataFrameNaFunctions$$fillCol(DataFrameNaFunctions.scala:443)
	at org.apache.spark.sql.DataFrameNaFunctions$$anonfun$7.apply(DataFrameNaFunctions.scala:502)
	at org.apache.spark.sql.DataFrameNaFunctions$$anonfun$7.apply(DataFrameNaFunctions.scala:492)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)
	at scala.collection.mutable.ArrayOps$ofRef.map(ArrayOps.scala:186)
	at org.apache.spark.sql.DataFrameNaFunctions.fillValue(DataFrameNaFunctions.scala:492)
	at org.apache.spark.sql.DataFrameNaFunctions.fill(DataFrameNaFunctions.scala:179)
	at org.apache.spark.sql.DataFrameNaFunctions.fill(DataFrameNaFunctions.scala:163)
	at org.apache.spark.sql.DataFrameNaFunctions.fill(DataFrameNaFunctions.scala:140)
	at org.apache.spark.sql.execution.stat.StatFunctions$.crossTabulate(StatFunctions.scala:225)
	at org.apache.spark.sql.DataFrameStatFunctions.crosstab(DataFrameStatFunctions.scala:215)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)
	at py4j.Gateway.invoke(Gateway.java:282)
	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
	at py4j.commands.CallCommand.execute(CallCommand.java:79)
	at py4j.GatewayConnection.run(GatewayConnection.java:238)
	at java.lang.Thread.run(Thread.java:745)


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""<ipython-input-13-6eb2220a558e>"", line 12, in <module>
    rescue_raw.crosstab('cal_year','animal_type')
  File ""/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/dataframe.py"", line 1945, in crosstab
    return DataFrame(self._jdf.stat().crosstab(col1, col2), self.sql_ctx)
  File ""/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py"", line 1257, in __call__
    answer, self.gateway_client, self.target_id, self.name)
  File ""/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/utils.py"", line 69, in deco
    raise AnalysisException(s.split(': ', 1)[1], stackTrace)
pyspark.sql.utils.AnalysisException: ""Reference 'Cat' is ambiguous, could be: Cat, Cat.;""
","<simpleError: org.apache.spark.sql.AnalysisException: Reference 'Cat' is ambiguous, could be: Cat, Cat.;
	at org.apache.spark.sql.catalyst.expressions.package$AttributeSeq.resolve(package.scala:259)
	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveQuoted(LogicalPlan.scala:121)
	at org.apache.spark.sql.Dataset.resolve(Dataset.scala:221)
	at org.apache.spark.sql.Dataset.col(Dataset.scala:1268)
	at org.apache.spark.sql.DataFrameNaFunctions.org$apache$spark$sql$DataFrameNaFunctions$$fillCol(DataFrameNaFunctions.scala:443)
	at org.apache.spark.sql.DataFrameNaFunctions$$anonfun$7.apply(DataFrameNaFunctions.scala:502)
	at org.apache.spark.sql.DataFrameNaFunctions$$anonfun$7.apply(DataFrameNaFunctions.scala:492)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:186)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)
	at scala.collection.mutable.ArrayOps$ofRef.map(ArrayOps.scala:186)
	at org.apache.spark.sql.DataFrameNaFunctions.fillValue(DataFrameNaFunctions.scala:492)
	at org.apache.spark.sql.DataFrameNaFunctions.fill(DataFrameNaFunctions.scala:179)
	at org.apache.spark.sql.DataFrameNaFunctions.fill(DataFrameNaFunctions.scala:163)
	at org.apache.spark.sql.DataFrameNaFunctions.fill(DataFrameNaFunctions.scala:140)
	at org.apache.spark.sql.execution.stat.StatFunctions$.crossTabulate(StatFunctions.scala:225)
	at org.apache.spark.sql.DataFrameStatFunctions.crosstab(DataFrameStatFunctions.scala:215)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sparklyr.Invoke.invoke(invoke.scala:161)
	at sparklyr.StreamHandler$$anonfun$handleMethodCall$1.apply$mcVI$sp(stream.scala:130)
	at sparklyr.StreamHandler$$anonfun$handleMethodCall$1.apply(stream.scala:128)
	at sparklyr.StreamHandler$$anonfun$handleMethodCall$1.apply(stream.scala:128)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.immutable.Range.foreach(Range.scala:160)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)
	at scala.collection.AbstractTraversable.map(Traversable.scala:104)
	at sparklyr.StreamHandler.handleMethodCall(stream.scala:128)
	at sparklyr.StreamHandler.read(stream.scala:62)
	at sparklyr.BackendHandler$$anonfun$channelRead0$1.apply$mcV$sp(handler.scala:60)
	at scala.util.control.Breaks.breakable(Breaks.scala:38)
	at sparklyr.BackendHandler.channelRead0(handler.scala:40)
	at sparklyr.BackendHandler.channelRead0(handler.scala:14)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:328)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:302)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1422)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:931)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:700)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)
	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:745)
>
"
22,19,"+--------------------+
|         animal_type|
+--------------------+
|                Bird|
|              Budgie|
|                Bull|
|                 Cat|
|                 Cow|
|                Deer|
|                 Dog|
|              Ferret|
|                Fish|
|                 Fox|
|                Goat|
|             Hamster|
|            Hedgehog|
|               Horse|
|                Lamb|
|              Lizard|
|              Pigeon|
|              Rabbit|
|               Sheep|
|               Snake|
|            Squirrel|
|            Tortoise|
|Unknown - Animal ...|
|Unknown - Domesti...|
|Unknown - Heavy L...|
|Unknown - Wild An...|
|                 cat|
+--------------------+
","# Source:     spark<?> [?? x 1]
# Ordered by: animal_type
   animal_type                                     
   <chr>                                           
 1 Bird                                            
 2 Budgie                                          
 3 Bull                                            
 4 Cat                                             
 5 Cow                                             
 6 Deer                                            
 7 Dog                                             
 8 Ferret                                          
 9 Fish                                            
10 Fox                                             
11 Goat                                            
12 Hamster                                         
13 Hedgehog                                        
14 Horse                                           
15 Lamb                                            
16 Lizard                                          
17 Pigeon                                          
18 Rabbit                                          
19 Sheep                                           
20 Snake                                           
21 Squirrel                                        
22 Tortoise                                        
23 Unknown - Animal rescue from water - Farm animal
24 Unknown - Domestic Animal Or Pet                
25 Unknown - Heavy Livestock Animal                
26 Unknown - Wild Animal                           
27 cat                                             
"
