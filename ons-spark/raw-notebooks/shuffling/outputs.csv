cell_no,execution_count,tidy_python_output,r_output
1,1,,
4,2,,
7,3,"+---+
| id|
+---+
|  0|
|  1|
|  2|
|  3|
|  4|
|  5|
|  6|
|  7|
|  8|
|  9|
| 10|
| 11|
| 12|
| 13|
| 14|
| 15|
| 16|
| 17|
| 18|
| 19|
+---+
","# A tibble: 20 × 1
      id
   <int>
 1     0
 2     1
 3     2
 4     3
 5     4
 6     5
 7     6
 8     7
 9     8
10     9
11    10
12    11
13    12
14    13
15    14
16    15
17    16
18    17
19    18
20    19
"
10,4,"+---+------------+
| id|partition_id|
+---+------------+
|  0|           0|
|  1|           0|
|  2|           0|
|  3|           0|
|  4|           0|
|  5|           0|
|  6|           0|
|  7|           0|
|  8|           0|
|  9|           0|
| 10|           1|
| 11|           1|
| 12|           1|
| 13|           1|
| 14|           1|
| 15|           1|
| 16|           1|
| 17|           1|
| 18|           1|
| 19|           1|
+---+------------+
","# A tibble: 20 × 2
      id partition_id
   <int>        <int>
 1     0            0
 2     1            0
 3     2            0
 4     3            0
 5     4            0
 6     5            0
 7     6            0
 8     7            0
 9     8            0
10     9            0
11    10            1
12    11            1
13    12            1
14    13            1
15    14            1
16    15            1
17    16            1
18    17            1
19    18            1
20    19            1
"
13,5,"+---+------------+-----+
| id|partition_id|rand1|
+---+------------+-----+
|  0|           0|    9|
|  1|           0|    4|
|  2|           0|    4|
|  3|           0|    8|
|  4|           0|    6|
|  5|           0|    2|
|  6|           0|    2|
|  7|           0|   10|
|  8|           0|    4|
|  9|           0|    3|
| 10|           1|    1|
| 11|           1|    4|
| 12|           1|    9|
| 13|           1|    6|
| 14|           1|    4|
| 15|           1|    9|
| 16|           1|    1|
| 17|           1|    6|
| 18|           1|    9|
| 19|           1|    8|
+---+------------+-----+
","# A tibble: 20 × 3
      id partition_id rand1
   <int>        <int> <dbl>
 1     0            0     9
 2     1            0     4
 3     2            0     4
 4     3            0     8
 5     4            0     6
 6     5            0     2
 7     6            0     2
 8     7            0    10
 9     8            0     4
10     9            0     3
11    10            1     1
12    11            1     4
13    12            1     9
14    13            1     6
15    14            1     4
16    15            1     9
17    16            1     1
18    17            1     6
19    18            1     9
20    19            1     8
"
16,6,"+---+------------+-----+----------------+
| id|partition_id|rand1|partition_id_new|
+---+------------+-----+----------------+
| 10|           1|    1|               0|
| 16|           1|    1|               0|
|  5|           0|    2|               0|
|  6|           0|    2|               0|
|  9|           0|    3|               0|
|  1|           0|    4|               0|
|  2|           0|    4|               0|
|  8|           0|    4|               0|
| 11|           1|    4|               0|
| 14|           1|    4|               0|
|  4|           0|    6|               1|
| 13|           1|    6|               1|
| 17|           1|    6|               1|
|  3|           0|    8|               1|
| 19|           1|    8|               1|
|  0|           0|    9|               1|
| 12|           1|    9|               1|
| 15|           1|    9|               1|
| 18|           1|    9|               1|
|  7|           0|   10|               1|
+---+------------+-----+----------------+
","# A tibble: 20 × 4
      id partition_id rand1 partition_id_new
   <int>        <int> <dbl>            <int>
 1    10            1     1                0
 2    16            1     1                0
 3     5            0     2                0
 4     6            0     2                0
 5     9            0     3                0
 6     1            0     4                0
 7     2            0     4                0
 8     8            0     4                0
 9    11            1     4                0
10    14            1     4                0
11     4            0     6                1
12    13            1     6                1
13    17            1     6                1
14     3            0     8                1
15    19            1     8                1
16     0            0     9                1
17    12            1     9                1
18    15            1     9                1
19    18            1     9                1
20     7            0    10                1
"
19,8,,
22,9,,
25,10,,
28,11,"Row count:  100

Top 5 rows:
    rand1  rand2  row_count
0      1      1        969
1      1      2        988
2      1      3       1023
3      1      4       1033
4      1      5        976

Bottom 5 rows:
     rand1  rand2  row_count
95     10      6        963
96     10      7       1004
97     10      8       1023
98     10      9        989
99     10     10        959
","[1] ""Row count: ""
[1] 100
[1] ""Top 5 rows:""
# A tibble: 5 × 3
  rand1 rand2 row_count
  <dbl> <dbl>     <dbl>
1     1     1       969
2     1     2       988
3     1     3      1023
4     1     4      1033
5     1     5       976
[1] ""Bottom 5 rows:""
# A tibble: 5 × 3
  rand1 rand2 row_count
  <dbl> <dbl>     <dbl>
1    10     6       963
2    10     7      1004
3    10     8      1023
4    10     9       989
5    10    10       959
"
32,13,"Row count:  100000

Top 5 rows:
    id  rand1
0   7     10
1  19     10
2  21     10
3  24     10
4  58     10

Bottom 5 rows:
           id  rand1
99995  99930      1
99996  99936      1
99997  99947      1
99998  99963      1
99999  99975      1
","[1] ""Row count: ""
[1] 100000
[1] ""Top 5 rows:""
# A tibble: 5 × 2
     id rand1
  <int> <dbl>
1     7    10
2    19    10
3    21    10
4    24    10
5    58    10
[1] ""Bottom 5 rows:""
# A tibble: 5 × 2
     id rand1
  <int> <dbl>
1 99930     1
2 99936     1
3 99947     1
4 99963     1
5 99975     1
"
35,15,"== Parsed Logical Plan ==
'Sort ['rand1 DESC NULLS LAST], true
+- Sort [rand1#77L ASC NULLS FIRST], true
   +- Sort [rand1#77L DESC NULLS LAST], true
      +- Sort [rand1#77L ASC NULLS FIRST], true
         +- Project [id#75L, CEIL((rand(999) * cast(10 as double))) AS rand1#77L]
            +- Range (0, 100000, step=1, splits=Some(2))

== Analyzed Logical Plan ==
id: bigint, rand1: bigint
Sort [rand1#77L DESC NULLS LAST], true
+- Sort [rand1#77L ASC NULLS FIRST], true
   +- Sort [rand1#77L DESC NULLS LAST], true
      +- Sort [rand1#77L ASC NULLS FIRST], true
         +- Project [id#75L, CEIL((rand(999) * cast(10 as double))) AS rand1#77L]
            +- Range (0, 100000, step=1, splits=Some(2))

== Optimized Logical Plan ==
Sort [rand1#77L DESC NULLS LAST], true
+- Project [id#75L, CEIL((rand(999) * 10.0)) AS rand1#77L]
   +- Range (0, 100000, step=1, splits=Some(2))

== Physical Plan ==
*(2) Sort [rand1#77L DESC NULLS LAST], true, 0
+- Exchange rangepartitioning(rand1#77L DESC NULLS LAST, 100)
   +- *(1) Project [id#75L, CEIL((rand(999) * 10.0)) AS rand1#77L]
      +- *(1) Range (0, 100000, step=1, splits=2)
","<jobj[73]>
  org.apache.spark.sql.execution.QueryExecution
  == Parsed Logical Plan ==
'Project ['id, 'rand1]
+- 'UnresolvedRelation `sparklyr_tmp_8854dc0e_5f3f_49ea_aa20_2ecb3fb39340`

== Analyzed Logical Plan ==
id: int, rand1: bigint
Project [id#67, rand1#75L]
+- SubqueryAlias `sparklyr_tmp_8854dc0e_5f3f_49ea_aa20_2ecb3fb39340`
   +- Sort [rand2#76 ASC NULLS FIRST], true
      +- Project [id#67, rand1#75L, rand2#76]
         +- SubqueryAlias `sparklyr_tmp_0cf67306_b98a_4f6e_9707_9724b998d046`
            +- Sort [rand1#75L ASC NULLS FIRST], true
               +- Project [id#67, rand1#75L, rand2#76]
                  +- SubqueryAlias `sparklyr_tmp_eeb09493_e2b4_441e_87c6_cde6e90f4ee7`
                     +- Sort [rand2#76 ASC NULLS FIRST], true
                        +- Project [id#67, rand1#75L, rand2#76]
                           +- SubqueryAlias `sparklyr_tmp_53ec02b6_5c26_4044_a594_706af310650b`
                              +- Sort [rand1#75L ASC NULLS FIRST], true
                                 +- Project [id#67, rand1#75L, CheckOverflow((promote_precision(cast(cast(rand1#75L as decimal(20,0)) as decimal(21,1))) * promote_precision(cast(-1.0 as decimal(21,1)))), DecimalType(23,1)) AS rand2#76]
                                    +- SubqueryAlias `q01`
                                       +- Project [id#67, CEIL((rand(999) * cast(10.0 as double))) AS rand1#75L]
                                          +- SubqueryAlias `sparklyr_tmp_cec8b527_db0b_4b61_8c5e_71acac1728d2`
                                             +- LogicalRDD [id#67], false

== Optimized Logical Plan ==
Project [id#67, rand1#75L]
+- Sort [rand2#76 ASC NULLS FIRST], true
   +- Project [id#67, rand1#75L, CheckOverflow((promote_precision(cast(cast(rand1#75L as decimal(20,0)) as decimal(21,1))) * -1.0), DecimalType(23,1)) AS rand2#76]
      +- Project [id#67, CEIL((rand(999) * 10.0)) AS rand1#75L]
         +- LogicalRDD [id#67], false

== Physical Plan ==
*(2) Project [id#67, rand1#75L]
+- *(2) Sort [rand2#76 ASC NULLS FIRST], true, 0
   +- Exchange rangepartitioning(rand2#76 ASC NULLS FIRST, 100)
      +- *(1) Project [id#67, rand1#75L, CheckOverflow((promote_precision(cast(cast(rand1#75L as decimal(20,0)) as decimal(21,1))) * -1.0), DecimalType(23,1)) AS rand2#76]
         +- *(1) Project [id#67, CEIL((rand(999) * 10.0)) AS rand1#75L]
            +- Scan ExistingRDD[id#67]
"
